// <auto-generated />
using System;
using ListGenius.Api.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ListGenius.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ListGenius.Api.Entities.ProductGroups.ProductGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varbinary(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("ProductGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 5, 26, 19, 5, 40, 678, DateTimeKind.Local).AddTicks(9968),
                            Description = "GERAL",
                            Enabled = true,
                            Image = new byte[] { 0 },
                            Name = "GERAL",
                            UpdatedDate = new DateTime(2024, 5, 26, 19, 5, 40, 679, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("ListGenius.Api.Entities.ProductShareds.ProductShared", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("IdProductGroup")
                        .HasColumnType("int");

                    b.Property<int>("IdProductSubGroup")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varbinary(500)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("Qrcode")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varbinary(500)");

                    b.Property<int>("Unit")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Value")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("IdProductGroup");

                    b.HasIndex("IdProductSubGroup");

                    b.ToTable("ProductsShared");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 5, 26, 19, 5, 40, 679, DateTimeKind.Local).AddTicks(283),
                            Description = "TESTE 1",
                            Enabled = true,
                            IdProductGroup = 1,
                            IdProductSubGroup = 1,
                            Image = new byte[] { 0 },
                            Link = "",
                            Name = "Teste 1",
                            Qrcode = new byte[] { 0 },
                            Unit = 1,
                            UpdatedDate = new DateTime(2024, 5, 26, 19, 5, 40, 679, DateTimeKind.Local).AddTicks(283),
                            Value = 22.05m
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 5, 26, 19, 5, 40, 679, DateTimeKind.Local).AddTicks(288),
                            Description = "TESTE 2",
                            Enabled = true,
                            IdProductGroup = 1,
                            IdProductSubGroup = 1,
                            Image = new byte[] { 0 },
                            Link = "",
                            Name = "Teste 2",
                            Qrcode = new byte[] { 0 },
                            Unit = 2,
                            UpdatedDate = new DateTime(2024, 5, 26, 19, 5, 40, 679, DateTimeKind.Local).AddTicks(289),
                            Value = 33.33m
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 5, 26, 19, 5, 40, 679, DateTimeKind.Local).AddTicks(290),
                            Description = "TESTE 3",
                            Enabled = false,
                            IdProductGroup = 1,
                            IdProductSubGroup = 1,
                            Image = new byte[] { 0 },
                            Link = "",
                            Name = "Teste 3",
                            Qrcode = new byte[] { 0 },
                            Unit = 0,
                            UpdatedDate = new DateTime(2024, 5, 26, 19, 5, 40, 679, DateTimeKind.Local).AddTicks(291),
                            Value = 42.33m
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 5, 26, 19, 5, 40, 679, DateTimeKind.Local).AddTicks(293),
                            Description = "TESTE 4",
                            Enabled = true,
                            IdProductGroup = 1,
                            IdProductSubGroup = 1,
                            Image = new byte[] { 0 },
                            Link = "",
                            Name = "Teste 4",
                            Qrcode = new byte[] { 0 },
                            Unit = 3,
                            UpdatedDate = new DateTime(2024, 5, 26, 19, 5, 40, 679, DateTimeKind.Local).AddTicks(293),
                            Value = 77.77m
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 5, 26, 19, 5, 40, 679, DateTimeKind.Local).AddTicks(295),
                            Description = "TESTE 5",
                            Enabled = true,
                            IdProductGroup = 1,
                            IdProductSubGroup = 1,
                            Image = new byte[] { 0 },
                            Link = "",
                            Name = "Teste 5",
                            Qrcode = new byte[] { 0 },
                            Unit = 4,
                            UpdatedDate = new DateTime(2024, 5, 26, 19, 5, 40, 679, DateTimeKind.Local).AddTicks(295),
                            Value = 66.66m
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 5, 26, 19, 5, 40, 679, DateTimeKind.Local).AddTicks(298),
                            Description = "TESTE 6",
                            Enabled = false,
                            IdProductGroup = 1,
                            IdProductSubGroup = 1,
                            Image = new byte[] { 0 },
                            Link = "",
                            Name = "Teste 6",
                            Qrcode = new byte[] { 0 },
                            Unit = 0,
                            UpdatedDate = new DateTime(2024, 5, 26, 19, 5, 40, 679, DateTimeKind.Local).AddTicks(298),
                            Value = 35.31m
                        });
                });

            modelBuilder.Entity("ListGenius.Api.Entities.ProductSubGroups.ProductSubGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("IdProductGroup")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varbinary(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("IdProductGroup");

                    b.ToTable("ProductSubGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 5, 26, 19, 5, 40, 679, DateTimeKind.Local).AddTicks(177),
                            Description = "GERAL",
                            Enabled = true,
                            IdProductGroup = 1,
                            Image = new byte[] { 0 },
                            Name = "GERAL",
                            UpdatedDate = new DateTime(2024, 5, 26, 19, 5, 40, 679, DateTimeKind.Local).AddTicks(178)
                        });
                });

            modelBuilder.Entity("ListGenius.Api.Entities.Products.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("IdProductGroup")
                        .HasColumnType("int");

                    b.Property<int>("IdProductSubGroup")
                        .HasColumnType("int");

                    b.Property<int>("IdProductsList")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varbinary(500)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("Qrcode")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varbinary(500)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Value")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("IdProductGroup");

                    b.HasIndex("IdProductSubGroup");

                    b.HasIndex("IdProductsList");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 5, 26, 19, 5, 40, 679, DateTimeKind.Local).AddTicks(350),
                            Description = "TESTE 1",
                            Enabled = true,
                            IdProductGroup = 1,
                            IdProductSubGroup = 1,
                            IdProductsList = 1,
                            Image = new byte[] { 0 },
                            Link = "",
                            Name = "Teste 1",
                            Qrcode = new byte[] { 0 },
                            Unit = "Meter",
                            UpdatedDate = new DateTime(2024, 5, 26, 19, 5, 40, 679, DateTimeKind.Local).AddTicks(351),
                            Value = 22.05m
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 5, 26, 19, 5, 40, 679, DateTimeKind.Local).AddTicks(355),
                            Description = "TESTE 2",
                            Enabled = true,
                            IdProductGroup = 1,
                            IdProductSubGroup = 1,
                            IdProductsList = 1,
                            Image = new byte[] { 0 },
                            Link = "",
                            Name = "Teste 2",
                            Qrcode = new byte[] { 0 },
                            Unit = "SquareMeter",
                            UpdatedDate = new DateTime(2024, 5, 26, 19, 5, 40, 679, DateTimeKind.Local).AddTicks(356),
                            Value = 33.33m
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 5, 26, 19, 5, 40, 679, DateTimeKind.Local).AddTicks(357),
                            Description = "TESTE 3",
                            Enabled = false,
                            IdProductGroup = 1,
                            IdProductSubGroup = 1,
                            IdProductsList = 1,
                            Image = new byte[] { 0 },
                            Link = "",
                            Name = "Teste 3",
                            Qrcode = new byte[] { 0 },
                            Unit = "Unspecified",
                            UpdatedDate = new DateTime(2024, 5, 26, 19, 5, 40, 679, DateTimeKind.Local).AddTicks(358),
                            Value = 42.33m
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 5, 26, 19, 5, 40, 679, DateTimeKind.Local).AddTicks(361),
                            Description = "TESTE 4",
                            Enabled = true,
                            IdProductGroup = 1,
                            IdProductSubGroup = 1,
                            IdProductsList = 2,
                            Image = new byte[] { 0 },
                            Link = "",
                            Name = "Teste 4",
                            Qrcode = new byte[] { 0 },
                            Unit = "CubicMeter",
                            UpdatedDate = new DateTime(2024, 5, 26, 19, 5, 40, 679, DateTimeKind.Local).AddTicks(362),
                            Value = 77.77m
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 5, 26, 19, 5, 40, 679, DateTimeKind.Local).AddTicks(364),
                            Description = "TESTE 5",
                            Enabled = true,
                            IdProductGroup = 1,
                            IdProductSubGroup = 1,
                            IdProductsList = 2,
                            Image = new byte[] { 0 },
                            Link = "",
                            Name = "Teste 5",
                            Qrcode = new byte[] { 0 },
                            Unit = "Unit",
                            UpdatedDate = new DateTime(2024, 5, 26, 19, 5, 40, 679, DateTimeKind.Local).AddTicks(374),
                            Value = 66.66m
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 5, 26, 19, 5, 40, 679, DateTimeKind.Local).AddTicks(390),
                            Description = "TESTE 6",
                            Enabled = false,
                            IdProductGroup = 1,
                            IdProductSubGroup = 1,
                            IdProductsList = 2,
                            Image = new byte[] { 0 },
                            Link = "",
                            Name = "Teste 6",
                            Qrcode = new byte[] { 0 },
                            Unit = "Unspecified",
                            UpdatedDate = new DateTime(2024, 5, 26, 19, 5, 40, 679, DateTimeKind.Local).AddTicks(390),
                            Value = 35.31m
                        });
                });

            modelBuilder.Entity("ListGenius.Api.Entities.ProductsLists.ProductsList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ExternalLink")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varbinary(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Public")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("IdUser");

                    b.ToTable("ProductsLists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 5, 26, 19, 5, 40, 679, DateTimeKind.Local).AddTicks(229),
                            Description = "Description for Shopping List 1",
                            ExternalLink = "",
                            IdUser = "37846734-172e-4149-8cec-6f43d1eb3f60",
                            Image = new byte[] { 0 },
                            Name = "Shopping List 1",
                            UpdatedDate = new DateTime(2024, 5, 26, 19, 5, 40, 679, DateTimeKind.Local).AddTicks(230)
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 5, 26, 19, 5, 40, 679, DateTimeKind.Local).AddTicks(232),
                            Description = "Description for Shopping List 2",
                            ExternalLink = "",
                            IdUser = "37846734-172e-4149-8cec-6f43d1eb3f60",
                            Image = new byte[] { 0 },
                            Name = "Shopping List 2",
                            UpdatedDate = new DateTime(2024, 5, 26, 19, 5, 40, 679, DateTimeKind.Local).AddTicks(233)
                        });
                });

            modelBuilder.Entity("ListGenius.Api.Entities.Users.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("LogoImage")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "37846734-172e-4149-8cec-6f43d1eb3f60",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3ae26c2d-5766-4316-84dc-22d78a855b78",
                            Email = "jmmatheus23@gmail.com",
                            EmailConfirmed = true,
                            FullName = "JoaoDiasUser",
                            LockoutEnabled = false,
                            LogoImage = new byte[0],
                            NormalizedEmail = "JMMATHEUS23@GMAIL.COM",
                            NormalizedUserName = "JMMATHEUS23@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOWpoGN/K/e6j469eZWgLMSI4dh/5127SQDTlVDXMbFLAMpOWNij/sQJ/lgmn98inQ==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = new byte[0],
                            SecurityStamp = "8b31d330-34f6-4933-9fd9-ca513cd467f2",
                            TwoFactorEnabled = false,
                            UserName = "jmmatheus23@gmail.com"
                        },
                        new
                        {
                            Id = "38846734-172e-4149-8cec-6f43d1eb3f60",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9bf849c9-003c-4948-90fc-ec38bb42d7aa",
                            Email = "joaodiasworking@gmail.com",
                            EmailConfirmed = true,
                            FullName = "JoaoDiasAdmin",
                            LockoutEnabled = false,
                            LogoImage = new byte[0],
                            NormalizedEmail = "JOAODIASWORKING@GMAIL.COM",
                            NormalizedUserName = "JOAODIASWORKING@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIV/fDyl9nIelduka1A6I0tvaEYSwRv415/B6zDVqw2iZRhe9MtMhFTF2M862i0Aeg==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = new byte[0],
                            SecurityStamp = "d033b9cc-4084-4881-ac58-54f8a388037c",
                            TwoFactorEnabled = false,
                            UserName = "joaodiasworking@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "37846734-172e-4149-8cec-6f43d1eb3f60",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "38846734-172e-4149-8cec-6f43d1eb3f60",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ListGenius.Api.Entities.ProductShareds.ProductShared", b =>
                {
                    b.HasOne("ListGenius.Api.Entities.ProductGroups.ProductGroup", "ProductGroup")
                        .WithMany("ProductsShared")
                        .HasForeignKey("IdProductGroup")
                        .IsRequired();

                    b.HasOne("ListGenius.Api.Entities.ProductSubGroups.ProductSubGroup", "ProductSubGroup")
                        .WithMany("ProductsShared")
                        .HasForeignKey("IdProductSubGroup")
                        .IsRequired();

                    b.Navigation("ProductGroup");

                    b.Navigation("ProductSubGroup");
                });

            modelBuilder.Entity("ListGenius.Api.Entities.ProductSubGroups.ProductSubGroup", b =>
                {
                    b.HasOne("ListGenius.Api.Entities.ProductGroups.ProductGroup", "ProductGroup")
                        .WithMany("ProductSubGroups")
                        .HasForeignKey("IdProductGroup")
                        .IsRequired();

                    b.Navigation("ProductGroup");
                });

            modelBuilder.Entity("ListGenius.Api.Entities.Products.Product", b =>
                {
                    b.HasOne("ListGenius.Api.Entities.ProductGroups.ProductGroup", "ProductGroup")
                        .WithMany("Products")
                        .HasForeignKey("IdProductGroup")
                        .IsRequired();

                    b.HasOne("ListGenius.Api.Entities.ProductSubGroups.ProductSubGroup", "ProductSubGroup")
                        .WithMany("Products")
                        .HasForeignKey("IdProductSubGroup")
                        .IsRequired();

                    b.HasOne("ListGenius.Api.Entities.ProductsLists.ProductsList", "ProductsList")
                        .WithMany("Products")
                        .HasForeignKey("IdProductsList")
                        .IsRequired();

                    b.Navigation("ProductGroup");

                    b.Navigation("ProductSubGroup");

                    b.Navigation("ProductsList");
                });

            modelBuilder.Entity("ListGenius.Api.Entities.ProductsLists.ProductsList", b =>
                {
                    b.HasOne("ListGenius.Api.Entities.Users.ApplicationUser", "User")
                        .WithMany("ProductsLists")
                        .HasForeignKey("IdUser")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ListGenius.Api.Entities.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ListGenius.Api.Entities.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .IsRequired();

                    b.HasOne("ListGenius.Api.Entities.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ListGenius.Api.Entities.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("ListGenius.Api.Entities.ProductGroups.ProductGroup", b =>
                {
                    b.Navigation("ProductSubGroups");

                    b.Navigation("Products");

                    b.Navigation("ProductsShared");
                });

            modelBuilder.Entity("ListGenius.Api.Entities.ProductSubGroups.ProductSubGroup", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("ProductsShared");
                });

            modelBuilder.Entity("ListGenius.Api.Entities.ProductsLists.ProductsList", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ListGenius.Api.Entities.Users.ApplicationUser", b =>
                {
                    b.Navigation("ProductsLists");
                });
#pragma warning restore 612, 618
        }
    }
}
