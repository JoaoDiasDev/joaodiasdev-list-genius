@page "/Login"
@using ListGenius.UI.Components.Users
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<h1>Login</h1>

@if (_showErrors)
{
    <DisplayMessage ErrorMessage="@_error" />
}

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Credenciais</h5>
        <EditForm Model="_loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group mt-2">
                <label for="email">Email</label>
                <InputText Id="email" Class="form-control" @bind-Value="_loginModel.Email" />
                <ValidationMessage For="@(() => _loginModel.Email)" />
            </div>
            <div class="form-group mt-2">
                <label for="password">Password</label>
                <InputText Id="password" type="password" Class="form-control"
                @bind-Value="_loginModel.Password" />
                <ValidationMessage For="@(() => _loginModel.Password)" />
            </div>
            <button type="submit" class="btn btn-primary mt-2">Enviar</button>
        </EditForm>
    </div>
</div>

@code {

    private readonly UserModel _loginModel = new ();
    private bool _showErrors;
    private string _error = string.Empty;

    private async Task HandleLogin()
    {
        _showErrors = false;
        try
        {
            var result = await AuthService.Login(_loginModel);

            if (result?.Token is not null)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                _error = "Login inválido";
                _showErrors = true;
            }
        }
        catch (Exception ex)
        {
            _error = "Não foi possível fazer o Login : " + ex.Message;
            _showErrors = true;
        }
    }
}
