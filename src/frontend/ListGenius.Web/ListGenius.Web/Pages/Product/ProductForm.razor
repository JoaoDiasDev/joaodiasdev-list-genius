@using IProductsListService = ListGenius.Web.Components.ProductsLists.IProductsListService
<EditForm Model="@Product" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group row">
        <div class="col-sm-8">
            <label form="titulo">Title: </label>
            <div>
                <InputText @bind-Value="Product.Title" class="form-control" />
                <ValidationMessage For="@(()=> @Product.Titulo)" />
            </div>
            <label form="autor">Autor: </label>
            <div>
                <InputText @bind-Value="Product.Autor" class="form-control" />
                <ValidationMessage For="@(()=> @Product.Autor)" />
            </div>
            <label form="descricao">Descrição: </label>
            <div>
                <InputTextArea @bind-Value="Product.Descricao" rows="4" class="form-control" />
                <ValidationMessage For="@(()=> @Product.Descricao)" />
            </div>
        </div>
        <div class="col-sm-4">
            <div class="enlarge-onhover">
                <ImageFoto ImageRemota="@Product.Image" />
            </div>
        </div>
    </div>

    <div class="form-group row">
        <div class="col-sm-4">
            <label form="editora">Editora: </label>
            <InputSelect @bind-Value="Product.Editora" class="form-control">
                @foreach (var editora in Enum.GetValues(typeof(Editora)))
                {
                    <option value="@editora">@editora</option>
                }
            </InputSelect>
            <ValidationMessage For="@(()=> @Product.Editora)" />
        </div>
        <div class="col-sm-4">
            <label form="formato">Formato: </label>
            <InputText @bind-Value="Product.Formato" class="form-control" />
            <ValidationMessage For="@(()=> @Product.Formato)" />
        </div>
        <div class="col-sm-4">
            <label form="paginas">Páginas: </label>
            <InputNumber @bind-Value="Product.Paginas" class="form-control" />
            <ValidationMessage For="@(()=> @Product.Paginas)" />
        </div>
    </div>

    <div class="form-group row">
        <div class="col-sm-4">
            <label form="publicacao">Publicação: </label>
            <InputDate @bind-Value="Product.Publicacao" class="form-control" />
            <ValidationMessage For="@(()=> @Product.Publicacao)" />
        </div>

        <div class="col-sm-4">
            <label form="origem">Origem: </label>
            <InputSelect @bind-Value="Product.Origem" class="form-control">
                @foreach (var origem in Enum.GetValues(typeof(Origem)))
                {
                    <option value="@origem">@origem</option>
                }
            </InputSelect>
            <ValidationMessage For="@(()=> @Product.Origem)" />
        </div>

        <div class="col-sm-4">
            <label form="Cor">Cor: </label>
            <InputSelect @bind-Value="Product.Cor" class="form-control">
                @foreach (var cor in Enum.GetValues(typeof(Cor)))
                {
                    <option value="@cor">@cor</option>
                }
            </InputSelect>
            <ValidationMessage For="@(()=> @Product.Cor)" />
        </div>
    </div>

    <div class="form-group row">
        <div class="col-sm-4">
            <label form="Preco">Preço: </label>
            <InputNumber @bind-Value="Product.Preco" class="form-control" />
            <ValidationMessage For="@(()=> @Product.Preco)" />
        </div>
        <div class="col-sm-4">
            <label form="Estoque">Estoque: </label>
            <InputNumber @bind-Value="Product.Estoque" class="form-control" />
            <ValidationMessage For="@(()=> @Product.Estoque)" />
        </div>
        <div class="col-sm-4">
            <label form="categoria">Categoria: </label>
            <select @onchange="ProductGroupSelectionChanged" class="form-control">
                @if (_productsList != null)
                {
                    @foreach (var categoria in _productsList)
                    {
                        <option value="@categoria.Id"
                                selected="@(categoria.Id == Product.CategoriaId ? true : false)">
                            @categoria.Nome
                        </option>
                    }
                }
            </select>
        </div>
    </div>
    <div class="col-sm-12">
        <label form="imagem">Image: </label>
        <InputText @bind-Value="Product.Image" class="form-control" />
        <ValidationMessage For="@(()=> @Product.Image)" />
    </div>

    <div class="form-group row mt-2">
        <InputFile OnChange="@CarregaImage"></InputFile>
    </div>


    <button type="submit" class="btn btn-success mt-2">
        @ButtonTextSubmit
    </button>

    <button class="btn btn-danger mt-2"
            @onclick="@(()=> Navigation?.NavigateTo("Products"))">
        @ButtonTextCancelar
    </button>

</EditForm>

@code {

    List<ProductsListDto>? _productsList;
    private StreamContent? _fileContent;
    private string? _fileName;
    private string? _imageUrl;
    private string? _imageType;
    long _maxFileSize = 1024 * 500;
    private string _apiImagens = "https://localhost:7050/images/";

    [Inject]
    private NavigationManager? Navigation { get; set; }

    [Inject]
    private IProductsListService? ProductsListService { get; set; }

    [Inject]
    private IHttpClientFactory? Http { get; set; }

    [Parameter]
    public ProductDto? Product { get; set; }

    [Parameter]
    public string ButtonTextSubmit { get; set; } = "Salvar";

    [Parameter]
    public string ButtonTextCancelar { get; set; } = "Cancelar";

    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    public string? ImageRemota { get; set; }

    void ProductGroupSelectionChanged(ChangeEventArgs e)
    {
        if(Product is not null) Product.GroupName = e?.Value?.ToString();
    }

    async Task CarregaImage(InputFileChangeEventArgs e)
    {
        _fileContent = new StreamContent(e.File.OpenReadStream(_maxFileSize));
        _fileName = e.File.Name;
        Product.Image = _apiImagens + _fileName;
        var fileSize = new byte[e.File.Size];
        await e.File.OpenReadStream().ReadAsync(fileSize);
        _imageType = e.File.ContentType;
        _imageUrl = $"data:{_imageType};base64,{Convert.ToBase64String(fileSize)}";
        this.StateHasChanged();
    }
}
