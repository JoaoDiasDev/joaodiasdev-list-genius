@page "/products-list"
@inject NavigationManager NavigationManager
@inject IProductsListBusiness _productListBusiness

@if (ProductsLists == null)
{
    <Spinner />
}
else
{
    <div class="form-inline">
        <input type="text" class="form-control mb-2 mr-sm-2"
               @bind="_filterByName"
               placeholder="Filtrar por titulo" />
        <button type="button" class="btn btn-primary mr-sm-2 mb-2" @onclick="Filter">
            Filtrar
        </button>
        <button type="button" class="btn btn-danger mb-2" @onclick="ClearFilter">
            Limpar
        </button>
    </div>

    <h3 class="mb-5">Shopping Lists</h3>
    @if (ProductsLists.Count() > 0)
    {
        <div class="row mt-3">
           <ExibirMangas Mangas="@ProductsLists"></ExibirMangas>
        </div>
    }
}

@code {
    public IEnumerable<ProductsListVO>? ProductsLists { get; set; }
    public string? ErrorMessage { get; set; }
    private string _filterByName = string.Empty;
    private int totalPageCount;
    private int actualPage = 1;


    private async Task Filter()
    {
        actualPage = 1;
        await GetProductsList(_filterByName);
    }

    private async Task ClearFilter()
    {
        _filterByName = string.Empty;
        actualPage = 1;
        await GetProductsList();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await GetProductsList();
        }
        catch (UnauthorizedAccessException)
        {
            NavigationManager.NavigateTo("/Account/AccessDenied");
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    async Task GetProductsList(string name = "")
    {
        try
        {
            if (name is not null)
            {
                ProductsLists = _productListBusiness.FindByName(name: name);
            }
            else
            {
                ProductsLists = _productListBusiness.FindAll();
            }
        }
        catch (Exception)
        {
            NavigationManager.NavigateTo("/Account/AccessDenied");
        }
    }
}
