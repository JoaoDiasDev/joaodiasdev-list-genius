@implements IDisposable
@if (AllState.ShowVacationType)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card-header">
                    <h4 class="float-start">Vacation Types</h4>
                    <button class="btn btn-outline-success float-end" @onclick="@OpenDialog">
                        <i class="bi bi-plus-circle-dotted"></i> Add Type
                    </button>
                </div>
                <div class="card-header" style="max-height: 580px; overflow-x: hidden; overflow-y: scroll;">
                    <div class="card-body">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th scope="col">#</th>
                                    <th scope="col">Id</th>
                                    <th scope="col">Type</th>
                                    <th scope="col">Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (Types is not null)
                                {
                                    var count = 1;
                                    foreach (var item in Types)
                                    {
                                        <tr>
                                            <th scope="row">@count</th>
                                            <td>@item.Id</td>
                                            <td>@item.Name</td>
                                            <td>
                                                <i class="bi bi-pencil text-info cursorStyle" @onclick="() => EditClicked(item)"></i>
                                                <i class="bi bi-trash text-danger cursorStyle" @onclick="() => DeleteClicked(item)"></i>
                                            </td>
                                        </tr>
                                        count++;
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="4"><div class="alert alert-info text-center">No Type added yet!</div></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .cursorStyle {
        cursor: pointer;
    }

</style>

<VacationTypeDialog @ref="_vacationTypeDialog"
                    HandleSaveOperationEvent="OnSaveOperationEvent"
                    VacationType="VacationType"></VacationTypeDialog>

@code {
    private VacationType VacationType { get; set; } = new();
    private List<VacationType> Types { get; set; } = [];
    private VacationTypeDialog? _vacationTypeDialog;

    protected override async Task OnInitializedAsync()
    {
        await GetTypes();
        AllState.Action += StateHasChanged;
    }

    private async Task GetTypes()
    {
        Types = await VacationTypeService.GetAll(Constants.VacationTypeBaseUrl);
    }

    private void OpenDialog()
    {
        _vacationTypeDialog?.OpenDialog();
    }

    private async Task OnSaveOperationEvent(VacationType type)
    {
        bool successCheck;
        if (type.Id > 0)
        {
            var result = await VacationTypeService.Update(type, Constants.VacationTypeBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        else
        {
            var result = await VacationTypeService.Create(type, Constants.VacationTypeBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }

        if (successCheck)
        {
            VacationType = new VacationType();
            await GetTypes();
            _vacationTypeDialog?.ChangeTitle("Add");
        }
    }

    private void EditClicked(VacationType type)
    {
        VacationType = type;
        _vacationTypeDialog?.ChangeTitle("Update");
        OpenDialog();
    }

    private async void DeleteClicked(VacationType type)
    {
        var confirm = await SfDialogService.ConfirmAsync($"Are you sure you want to delete {type.Name}?", "Confirm!");
        if (!confirm) return;
        var response = await VacationTypeService.DeleteById(type.Id, Constants.VacationTypeBaseUrl);
        if (await DisplayMessage(response.Flag, response.Message))
        {
            await GetTypes();
        }
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await SfDialogService.AlertAsync(message, "Success");
            return true;
        }
        else
        {
            await SfDialogService.AlertAsync(message, "Error");
            return false;
        }
    }

    public void Dispose()
    {
        AllState.Action -= StateHasChanged;
    }
}
