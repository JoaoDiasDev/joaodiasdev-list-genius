@implements IDisposable
@if (AllState.ShowOvertimeType)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header text-bg-secondary">
                        <h4 class="float-start">Overtime Types</h4>
                        <button class="btn btn-success float-end" @onclick="@OpenDialog">
                            <i class="bi bi-plus-circle-dotted"></i> Add Type
                        </button>
                    </div>
                    <div class="card-header text-bg-light"
                         style="max-height: 580px; overflow-x: hidden; overflow-y: scroll;">
                        <div class="card-body text-bg-light">
                            <table class="table table-secondary table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col">Id</th>
                                        <th scope="col">Type</th>
                                        <th scope="col">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (Types is not null)
                                    {
                                        var count = 1;
                                        foreach (var item in Types)
                                        {
                                            <tr>
                                                <th scope="row">@count</th>
                                                <td>@item.Id</td>
                                                <td>@item.Name</td>
                                                <td>
                                                    <i class="bi bi-pencil text-info cursorStyle" @onclick="() => EditClicked(item)"></i>
                                                    <i class="bi bi-trash text-danger cursorStyle" @onclick="() => DeleteClicked(item)"></i>
                                                </td>
                                            </tr>
                                            count++;
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="4">
                                                <div class="alert alert-info text-center">No Type added yet!</div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<OvertimeTypeDialog @ref="_overtimeTypeDialog"
                    HandleSaveOperationEvent="OnSaveOperationEvent"
                    OvertimeType="OvertimeType"></OvertimeTypeDialog>

@code {
    private OvertimeType OvertimeType { get; set; } = new();
    private List<OvertimeType> Types { get; set; } = [];
    private OvertimeTypeDialog? _overtimeTypeDialog;

    protected override async Task OnInitializedAsync()
    {
        await GetTypes();
        AllState.Action += StateHasChanged;
    }

    private async Task GetTypes()
    {
        Types = await OvertimeTypeService.GetAll(Constants.OvertimeTypeBaseUrl);
    }

    private void OpenDialog()
    {
        _overtimeTypeDialog?.OpenDialog();
    }

    private async Task OnSaveOperationEvent(OvertimeType type)
    {
        bool successCheck;
        if (type.Id > 0)
        {
            var result = await OvertimeTypeService.Update(type, Constants.OvertimeTypeBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        else
        {
            var result = await OvertimeTypeService.Create(type, Constants.OvertimeTypeBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }

        if (successCheck)
        {
            OvertimeType = new OvertimeType();
            await GetTypes();
            _overtimeTypeDialog?.ChangeTitle("Add");
        }
    }

    private void EditClicked(OvertimeType type)
    {
        OvertimeType = type;
        _overtimeTypeDialog?.ChangeTitle("Update");
        OpenDialog();
    }

    private async void DeleteClicked(OvertimeType type)
    {
        var confirm = await SfDialogService.ConfirmAsync($"Are you sure you want to delete {type.Name}?", "Confirm!");
        if (!confirm) return;
        var response = await OvertimeTypeService.DeleteById(type.Id, Constants.OvertimeTypeBaseUrl);
        if (await DisplayMessage(response.Flag, response.Message))
        {
            await GetTypes();
        }
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await SfDialogService.AlertAsync(message, "Success");
            return true;
        }
        else
        {
            await SfDialogService.AlertAsync(message, "Error");
            return false;
        }
    }

    public void Dispose()
    {
        AllState.Action -= StateHasChanged;
    }
}
