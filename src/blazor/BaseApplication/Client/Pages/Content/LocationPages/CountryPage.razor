@implements IDisposable

@if (AllState.ShowCountry)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header text-bg-secondary">
                        <h4 class="float-start">Countries</h4>
                        <button class="btn btn-success float-end"
                                @onclick="OpenDialog">
                            <i class="bi bi-plus-circle-dotted"></i> Add Country
                        </button>
                    </div>
                    <div class="card-header text-bg-light" style="max-height: 580px; overflow-x: hidden; overflow-y: scroll; ">
                        <div class="card-body text-bg-light">
                            <table class="table table-secondary table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col">Id</th>
                                        <th scope="col">Country</th>
                                        <th scope="col">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (Countries is not null)
                                    {
                                        var count = 1;
                                        foreach (var item in Countries)
                                        {
                                            <tr>
                                                <th scope="row">@count</th>
                                                <td>@item.Id</td>
                                                <td>@item.Name</td>
                                                <td>
                                                    <i class="bi bi-pencil text-info cursorStyle"
                                                       @onclick="() => EditClicked(item)"></i>
                                                    <i class="bi bi-trash text-danger cursorStyle"
                                                       @onclick="() => DeleteClicked(item)"></i>

                                                </td>
                                            </tr>
                                            count++;
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="4">
                                                <div class="alert alert-info text-center">
                                                    No General Department added yet!
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .cursorStyle {
        cursor: pointer;
    }
</style>

<CountryDialog @ref="_countryDialog"
               Country="Country"
               OnSaveOperation="@HandleSaveOperation" />


@code
{
    CountryDialog? _countryDialog;
    private Country Country { get; set; } = new();
    private List<Country> Countries { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        await GetCountries();
        AllState.Action += StateHasChanged;
    }

    private async Task GetCountries()
    {
        Countries = await CountryService.GetAll(Constants.CountryBaseUrl);
    }

    private void OpenDialog()
    {
        _countryDialog?.OpenDialog();
    }

    //Add Or Update
    private async Task HandleSaveOperation(Country country)
    {
        bool successCheck;
        if (country.Id > 0)
        {
            var response = await CountryService.Update(country, Constants.CountryBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }
        else
        {
            var response = await CountryService.Create(country, Constants.CountryBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }

        if (successCheck)
        {
            Country = new Country();
            await GetCountries();
            _countryDialog?.ChangeTitle("Add");
        }
    }

    //Edit
    private void EditClicked(Country country)
    {
        _countryDialog?.ChangeTitle("Update");
        Country = country;
        OpenDialog();
    }

    //Delete
    private async Task DeleteClicked(Country country)
    {
        var isConfirmed = await SfDialogService.ConfirmAsync(title: "Delete Country",
        content: $"Do you really want to delete {country.Name}?");
        if (!isConfirmed) return;
        var response = await CountryService.DeleteById(country.Id,
            Constants.CountryBaseUrl);
        var successCheck = await DisplayMessage(response.Flag, response.Message);
        if (successCheck)
        {
            await GetCountries();
        }
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await SfDialogService.AlertAsync("Success", message);
            return true;
        }
        else
        {
            await SfDialogService.AlertAsync("Error", message);
            return false;
        }
    }

    public void Dispose()
    {
        AllState.Action -= StateHasChanged;
    }
}
