@implements IDisposable

@if (AllState.ShowCity)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header text-bg-secondary">
                        <h4 class="float-start">Cities</h4>
                        <button class="btn btn-success float-end"
                                @onclick="AddButtonClicked">
                            <i class="bi bi-plus-circle-dotted"></i> Add City
                        </button>
                    </div>
                    <div class="card-header text-bg-light"
                         style="max-height: 580px; overflow-x: hidden; overflow-y: scroll; ">
                        <div class="card-body text-bg-light">
                            <table class="table table-secondary table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col">Id</th>
                                        <th scope="col">Country</th>
                                        <th scope="col">City</th>
                                        <th scope="col">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (Cities is not null)
                                    {
                                        var count = 1;
                                        foreach (var item in Cities)
                                        {
                                            <tr>
                                                <th scope="row">@count</th>
                                                <td>@item.Id</td>
                                                <td>@item.Country?.Name</td>
                                                <td>@item.Name</td>
                                                <td>
                                                    <i class="bi bi-pencil text-info cursorStyle" 
                                                       @onclick="() => EditClicked(item)"></i>
                                                    <i class="bi bi-trash text-danger cursorStyle"
                                                       @onclick="() => DeleteClicked(item)"></i>

                                                </td>
                                            </tr>
                                            count++;
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="4">
                                                <div class="alert alert-info text-center">No City added yet!</div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .cursorStyle {
        cursor: pointer;
    }
</style>

<CityDialog @ref="_cityDialog"
              City="City"
              Countries="Countries"
              OnSaveOperation="HandleSaveOperation" />


@code {
    CityDialog? _cityDialog;
    private City City { get; set; } = new();
    public List<Country> Countries { get; set; } = [];
    private List<City> Cities { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        await GetCities();
        await GetCountries();
        AllState.Action += StateHasChanged;
    }

    private async Task GetCities()
    {
        Cities = await CityService.GetAll(Constants.CityBaseUrl);
    }

    private async Task GetCountries()
    {
        Countries = await CountryService.GetAll(Constants.CountryBaseUrl);
    }

    private void AddButtonClicked()
    {
        _cityDialog?.ChangeTitle("Add");
        City = new City();
        OpenDialog();
    }

    private void OpenDialog()
    {
        _cityDialog?.OpenDialog();
    }

    //Add Or Update
    private async Task HandleSaveOperation(City city)
    {
        bool successCheck;
        if (city.Id > 0)
        {
            var response = await CityService.Update(city, Constants.CityBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }
        else
        {
            var response = await CityService.Create(city, Constants.CityBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }

        if (successCheck)
        {
            City = new City();
            await GetCities();
            _cityDialog?.ChangeTitle("Add");
        }
    }

    //Edit
    private void EditClicked(City city)
    {
        _cityDialog?.ChangeTitle("Update");
        City = city;
        OpenDialog();
    }

    //Delete
    private async Task DeleteClicked(City city)
    {
        var isConfirmed = await SfDialogService.ConfirmAsync($"Are you sure you wanna delete {city.Name}?",
            "Confirm Delete");
        if (!isConfirmed) return;

        var response = await CityService.DeleteById(city.Id, Constants.CityBaseUrl);
        var successCheck = await DisplayMessage(response.Flag, response.Message);
        if (successCheck)
        {
            await GetCities();
        }
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await SfDialogService.AlertAsync("Success", message);
            return true;
        }
        else
        {
            await SfDialogService.AlertAsync("Error", message);
            return false;
        }
    }

    public void Dispose()
    {
        AllState.Action -= StateHasChanged;
    }
}
