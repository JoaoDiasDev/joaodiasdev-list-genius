@implements IDisposable

<div class="btn-group">
    <img src="@(UserProfileState.UserProfile.Image)"
         width="30" height="40" style="border-radius: 50%; margin-right: 5px;" alt="profile image" />
    <button type="button" class="btn btn-none border-0 dropdown-toggle dropdown-toggle-split"
            data-bs-toggle="dropdown" aria-expanded="False">
        <span class="visually-hidden">Toggle Dropdown</span>
    </button>
    <ul class="dropdown-menu mt-2 border-0">
        <li>
            <div class="card">
                <div class="card-body">
                    <ul class="list-group">
                        <li class="list-group-item">
                            <a class="text-primary fw-bold float-start text-decoration-none"
                               style="font-family: Tahoma; cursor: pointer;" @onclick="UserProfileClicked">
                                <i class="bi bi-person-gear"></i>
                                Profile
                            </a>
                        </li>
                    </ul>
                </div>
                <div class="card-footer">
                    <button class="btn btn-danger btn-sm fw-bold w-100" @onclick="LogoutClicked">
                        <i class="bi bi-arrow-left"></i>
                        Logout
                    </button>
                </div>
            </div>
        </li>
    </ul>
</div>

@code {
    private string ProfileImage { get; set; } = "";

    protected async override Task OnInitializedAsync()
    {
        await LoadImage();
        UserProfileState.Action += StateHasChanged;
    }

    async Task LoadImage()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            UserProfileState.UserProfile.Id = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)!.Value;
            var client = await GetHttpClient.GetPrivateHttpClient();
            var response = await client.GetAsync($"api/authentication/user-image/{UserProfileState.UserProfile.Id}");
            if (!response.IsSuccessStatusCode) return;

            var result = await response.Content.ReadAsStringAsync();
            if (string.IsNullOrEmpty(result))
            {
                return;
            }
            else
            {
                UserProfileState.UserProfile.Image = result;
            }

        }
        catch (Exception)
        {
            //Ignore
        }
    }

    async Task LogoutClicked()
    {
        var logouModel = new UserSessionDto();
        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(logouModel);
        NavigationManager.NavigateTo("/identity/account/login", replace: true, forceLoad: true);
    }

    private void UserProfileClicked() => AllState.UserProfileClicked();

    public void Dispose() => UserProfileState.Action -= StateHasChanged;
}
