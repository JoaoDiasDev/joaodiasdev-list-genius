@implements IDisposable
@if (AllState.ShowUserProfile)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-3"></div>
            <div class="col-lg-6">
                <EditForm Model="UserProfileState.UserProfile" OnInvalidSubmit="UpdateProfile">
                    <DataAnnotationsValidator />
                    <div class="card border-success shadow-lg">
                        <div class="card-header">Personal Information</div>
                        <div class="card-body">
                            <div class="container">
                                <div class="row">
                                    <div class="col-lg-3"></div>
                                    <div class="col-lg-6 d-flex justify-content-center">
                                        <div class="vstack gap-2">
                                            <img style="width:100px; height:100px; border-radius:50%" src="@UserProfileState.UserProfile.Image" />
                                            <InputFile OnChange="UploadImage" class="form-control" />
                                        </div>
                                    </div>
                                    <div class="col-lg-3"></div>
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="form-label">Id</label>
                                <input type="text" value="@UserProfileState.UserProfile.Id" class="form-control" disabled />
                            </div>
                            <div class="form-group mt-3">
                                <label class="form-label">Name</label>
                                <InputText @bind-Value="UserProfileState.UserProfile.Name" class="form-control" />
                            </div>
                            <div class="form-group mt-3">
                                <label class="form-label">Email Address</label>
                                <input type="email" @bind-value="UserProfileState.UserProfile.Email" class="form-control" />
                            </div>
                            <div class="form-group mt-4">
                                @if (ShowSpinner)
                                {
                                    <ButtonLoadingSpinner />
                                }
                                else
                                {
                                    <button class="btn btn-primary fload-end" type="submit">Save</button>
                                }
                            </div>
                        </div>
                        <div class="card-footer">
                            <ValidationSummary />
                        </div>
                    </div>
                </EditForm>
            </div>
            <div class="col-lg-3"></div>
        </div>
    </div>
}
@code {
    public bool ShowSpinner { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await UserDetails();
        AllState.Action += StateHasChanged;
        UserProfileState.Action += StateHasChanged;
    }

    private async Task UserDetails()
    {
        try
        {
            var client = await GetHttpClient.GetPrivateHttpClient();
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            UserProfileState.UserProfile.Id = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)!.Value;
            UserProfileState.UserProfile.Name = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)!.Value;
            UserProfileState.UserProfile.Email = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)!.Value;
            var response = await client.GetAsync($"api/authentication/user-image/{UserProfileState.UserProfile.Id}");
            if (!response.IsSuccessStatusCode) return;

            var result = await response.Content.ReadAsStringAsync();
            if (string.IsNullOrEmpty(result))
            {
                return;
            }
            else
            {
                UserProfileState.UserProfile.Image = result;
            }
        }
        catch (Exception)
        {
            //Ignore
        }
    }

    private async Task UpdateProfile()
    {
        if (UserProfileState.UserProfile.Image == "../images/profile/default-profile-image.png")
        {
            await SfDialogService.AlertAsync("Please upload an image", "Alert!");
            return;
        }
        ShowSpinner = true;
        var client = await GetHttpClient.GetPrivateHttpClient();
        var response = await client.PutAsJsonAsync("api/authentication/update-profile", UserProfileState.UserProfile);
        if (!response.IsSuccessStatusCode)
        {
            ShowSpinner = false;
            return;
        }
        var result = await response.Content.ReadFromJsonAsync<bool>();
        if (result)
        {
            ShowSpinner = false;
            await SfDialogService.AlertAsync("Profile updated successfully", "Success!");
            UserProfileState.ProfileUpdated();
            await LogoutClicked();
        }
        ShowSpinner = false;
    }

    private async Task UploadImage(InputFileChangeEventArgs e)
    {
        if (e.File.Name.ToLower().Contains(".png"))
        {
            var format = "image/png";
            var resizedImage = await e.File.RequestImageFileAsync(format, 300, 300);
            var buffer = new byte[resizedImage.Size];
            await resizedImage.OpenReadStream().ReadAsync(buffer);
            var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            UserProfileState.UserProfile.Image = imageData;
            imageData = "";
            return;
        }
        await SfDialogService.AlertAsync("Please upload a png image.", "Alert!");
        return;
    }

    private async Task LogoutClicked()
    {
        var logoutModel = new UserSessionDto();
        var customAuthProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
        await customAuthProvider.UpdateAuthenticationState(logoutModel);
        NavigationManager.NavigateTo("/identity/account/login", replace: true, forceLoad: true);
    }

    public void Dispose()
    {
        AllState.Action -= StateHasChanged;
        UserProfileState.Action -= StateHasChanged;
    }
}
