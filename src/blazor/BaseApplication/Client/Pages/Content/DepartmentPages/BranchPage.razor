@implements IDisposable

@if (AllState.ShowBranch)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header text-bg-secondary">
                        <h4 class="float-start">Branches</h4>
                        <button class="btn btn-success float-end"
                                @onclick="AddButtonClicked">
                            <i class="bi bi-plus-circle-dotted"></i> Add Branch
                        </button>
                    </div>
                    <div class="card-header text-bg-light"
                         style="max-height: 580px; overflow-x: hidden; overflow-y: scroll; ">
                        <div class="card-body text-bg-light">
                            <table class="table table-secondary table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col">Id</th>
                                        <th scope="col">Department</th>
                                        <th scope="col">Branch</th>
                                        <th scope="col">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (Branches is not null)
                                    {
                                        var count = 1;
                                        foreach (var item in Branches)
                                        {
                                            <tr>
                                                <th scope="row">@count</th>
                                                <td>@item.Id</td>
                                                <td>@item.Department?.Name</td>
                                                <td>@item.Name</td>
                                                <td>
                                                    <i class="bi bi-pencil text-info" id="cursorStyle"
                                                       @onclick="() => EditClicked(item)"></i>
                                                    <i class="bi bi-trash text-danger" id="cursorStyle"
                                                       @onclick="() => DeleteClicked(item)"></i>

                                                </td>
                                            </tr>
                                            count++;
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="4">
                                                <div class="alert alert-info text-center">No Branch added yet!</div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<style>
    #cursorStyle {
        cursor: pointer;
    }
</style>

<BranchDialog @ref="_branchDialog"
              Branch="Branch"
              Departments="Departments"
              OnSaveOperation="HandleSaveOperation" />


@code {
    BranchDialog? _branchDialog;
    private Branch Branch { get; set; } = new();
    public List<Department> Departments { get; set; } = [];
    private List<Branch> Branches { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        await GetBranches();
        await GetDepartments();
        AllState.Action += StateHasChanged;
    }

    private async Task GetBranches()
    {
        Branches = await BranchService.GetAll(Constants.BranchBaseUrl);
    }

    private async Task GetDepartments()
    {
        Departments = await DepartmentService.GetAll(Constants.DepartmentBaseUrl);
    }

    private void AddButtonClicked()
    {
        _branchDialog?.ChangeTitle("Add");
        Branch = new Branch();
        OpenDialog();
    }

    private void OpenDialog()
    {
        _branchDialog?.OpenDialog();
    }

    //Add Or Update
    private async Task HandleSaveOperation(Branch branch)
    {
        bool successCheck;
        if (branch.Id > 0)
        {
            var response = await BranchService.Update(branch, Constants.BranchBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }
        else
        {
            var response = await BranchService.Create(branch, Constants.BranchBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }

        if (successCheck)
        {
            Branch = new Branch();
            await GetBranches();
            _branchDialog?.ChangeTitle("Add");
        }
    }

    //Edit
    private void EditClicked(Branch branch)
    {
        _branchDialog?.ChangeTitle("Update");
        Branch = branch;
        OpenDialog();
    }

    //Delete
    private async Task DeleteClicked(Branch branch)
    {
        var isConfirmed = await SfDialogService.ConfirmAsync($"Are you sure you wanna delete {branch.Name}?",
            "Confirm Delete");
        if (!isConfirmed) return;

        var response = await BranchService.DeleteById(branch.Id, Constants.BranchBaseUrl);
        var successCheck = await DisplayMessage(response.Flag, response.Message);
        if (successCheck)
        {
            await GetBranches();
        }
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await SfDialogService.AlertAsync("Success", message);
            return true;
        }
        else
        {
            await SfDialogService.AlertAsync("Error", message);
            return false;
        }
    }

    public void Dispose()
    {
        AllState.Action -= StateHasChanged;
    }
}
